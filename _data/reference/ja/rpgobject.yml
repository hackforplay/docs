RPGObject:
  name: RPGObject
  type: class
  desc: キャラクターのクラス
  fields:
    atk:
      name: こうげきりょく
      type: number
      init: 0
      desc: |
        キャラクターのこうげきりょく
        [こうげきする](rpgobject#こうげきする)ときに相手にあたえるダメージの量
        もし[しょうかんする](rpgobject#しょうかんする)で作られたキャラクターなら、おやのこうげきりょくを引きつぐ
      code: |
        this.こうげきりょく = 1;

    # 仕様が固まるまで保留
    # location:
    #   name: ばしょ
    #   type: Location
    #   desc: |
    #     キャラクターの今いる[ばしょ location/Location]をあらわす

    mapName: # map.name の getter と、locate のラッパーとしての setter を作る
      name: マップ
      type: string
      init: ''
      desc: |
        キャラクターがいるマップのなまえ
        マップをかえるには[いく](rpgobject#いく)を使う

    mapX:
      name: ひだりから
      type: number
      init: 15
      desc: |
        キャラクターがひだりから何マス目にいるか
        ばしょをかえるには[いく](rpgobject#いく)を使う

    mapY:
      name: うえから
      type: number
      init: 10
      desc: |
        キャラクターがうえから何マス目にいるか
        ばしょをかえるには[いく](rpgobject#いく)を使う

    money:
      name: おかね
      type: number
      init: 0
      desc: |
        このキャラクターが持っているおかねの量
      code: |
        this.money = 1;

    opacity:
      name: みえやすさ
      type: number
      init: 1
      desc: |
        このキャラクターの不透明度
        0 にするとキャラクターが見えなくなる
      code: |
        this.opacty = 0;

    collisionFlag:
      name: ぶつかるか
      type: boolean
      init: false
      desc: |
        このキャラクターが他のキャラクターとぶつかるかどうか
        true にするとぶつかる
        何も設定しなかった場合、[ふまれたとき](trigger#ふまれたとき)がなければ true になる

    penetrate:
      name: かんつうするかいすう
      type: number
      init: 0
      desc: |
        このキャラクターが他のキャラクターに[ダメージ](rpgobject#ダメージ)を与えたとき、消えずにのこる（貫通する）回数
        かんつうするかいすうが 0 だと、ぶつかったときに消えてしまう

    hp:
      name: たいりょく
      type: number
      init: 0
      desc: |
        キャラクターのたいりょく
        たいりょくが 0 になると、キャラクターは消えてしまう
        たいりょくを設定しなかったら、キャラクターは無敵になる
      code: |
        this.たいりょく = 1;

    behavior:
      name: なにをしているか
      type: string
      init: 'idle'
      desc: |
        このキャラクターが今何をしているか
        'idle' なら、今は何もしていない
        'walk' なら、今は[あるく](rpgobject#あるく)している
        'attack' なら、今は[こうげきする](rpgobject#こうげきする)している
        'dead' なら、[たいりょく](rpgobject#たいりょく)が 0 になってしまった

    forward:
      name: ベクトル
      type: Vector2
      desc: |
        このキャラクターが向いている方向の[ベクトル](vector#vector2)
        つねに大きさが１の単位ベクトルである

    direction:
      name: むき
      type: string
      init: むき.した
      desc: |
        このキャラクターの今の[むき](enum#むき)
      code: |
        this.むき = むき.した;

    family:
      name: なかま
      type: string
      init: '__Independence'
      desc: |
        このキャラクターが何の[なかま](enum#なかま)なのか
        何も設定しなければ、誰の仲間でもない
      code: |
        this.なかま = なかま.プレイヤー;

    damage:
      name: ダメージ
      type: number
      init: 0
      desc: |
        このキャラクターがぶつかったときに、相手に与えるダメージ
        何も設定しなければ、ダメージをあたえない

    speed:
      name: あるくはやさ
      type: number
      init: 1
      desc: |
        このキャラクターが[あるく](rpgobject#あるく)ときのはやさ

    collideMapBoader:
      name: マップのはしにぶつかるか
      type: boolean
      init: true
      desc: |
        このキャラクターがマップの端にぶつかるかどうか
        true ならぶつかる

    showHpLabel:
      name: たいりょくがみえるか
      type: boolean
      init: true
      desc: |
        このキャラクターの[たいりょく](rpgobject#たいりょく)がみえるかどうか
        true なら見える

    name:
      name: なまえ
      type: string
      desc: |
        このキャラクターのアセット名
        たとえばプレイヤーの[なまえ](rpgobject#なまえ)は 'プレイヤー' になっている

    skill:
      name: スキル
      type: string
      init: ''
      desc: |
        このキャラクターが[こうげきする](rpgobject#こうげきする)ときに出てくるキャラクターの名前
      code: |
        this.スキル = 'ビーム';

    fieldOfView:
      name: みえるはんい
      type: number
      init: 1
      desc: |
        このキャラクターが[みつける](rpgobject#みつける)ときに、何マスとなりまで見つけられるか

    lengthOfView:
      name: みえるきょり
      type: number
      init: 10
      desc: |
        このキャラクターが[みつける](rpgobject#みつける)ときに、何マス前まで見つけられるか

    isInvincible:
      name: むてきか
      type: boolean
      init: false
      desc: |
        このキャラクターが無敵かどうか
        true にすると、[ダメージ](rpgobject#ダメージ)を受けなくなる

    parent:
      name: おや
      type: RPGObject
      init: undefined
      desc: |
        このキャラクターを[しょうかんする](rpgobject#しょうかんする)によって作ったキャラクター

    attack:
      name: こうげきする
      type: function
      desc: |
        キャラクターにこうげきさせる
      code: |
        await this.こうげきする()

    walk:
      name: あるく
      type: function
      desc: |
        キャラクターを一歩歩かせる
      code: |
        await this.あるく();

    walkRight:
      name: みぎにあるく
      type: function
      desc: |
        このキャラクターの[むき](enum#むき)を変えずに右に一歩歩かせる
      code: |
        await this.みぎにあるく();

    walkLeft:
      name: ひだりにあるく
      type: function
      desc: |
        このキャラクターの[むき](enum#むき)を変えずに左に一歩歩かせる
      code: |
        await this.ひだりにあるく();

    locate:
      name: いく
      type: function
      desc: |
        このキャラクターのいちをかえる
      args:
        - name: ひだりから
          type: number
          desc: ひだりから何マス目にいどうするか
        - name: うえから
          type: number
          desc: うえから何マス目にいどうするか
        - name: マップ
          type: string
          desc: どのマップにいどうするか
      code: |
        await this.いく(7, 5, 'map2');

    wait:
      name: まつ
      type: function
      desc: |
        次の行のコードを実行するまで何秒か待つ
        このキャラクターが動けなくなるのではない
      args:
        - name: 秒数
          type: number
          desc: 何秒待つか
      code: |
        await this.まつ(1);
        await this.あるく();

    summon:
      name: しょうかんする
      type: function
      desc: |
        このキャラクターに別のキャラクターをしょうかんさせる
        とくに設定しなければ、しょうかんされたキャラクターは同じ[なかま](enum#なかま)になる
      args:
        - name: なまえ
          type: string
          desc: しょうかんしたいキャラクターの名前
        - name: まえに
          type: number
          init: 1
          desc: 自分から見て何マス前にしょうかんするか
        - name: みぎに
          type: number
          init: 0
          desc: 自分から見て何マス前にしょうかんするか
        - name: マップ
          type: string
          desc: どのマップにしょうかんするか
        - name: 向き
          type: IDir
          desc: どの向きにしょうかんするか

    transform:
      name: へんしんする
      type: function
      desc: |
        このキャラクターを別のキャラクターに変身させる
        変身後は[たいりょく](rpgobject#たいりょく)以外のパラメータが元に戻る
      args:
        - name: なまえ
          type: string
          desc: 変身後のキャラクターの名前

    find:
      name: みつける
      type: function
      desc: |
        まわりをみわたして、別のキャラクターのことをみつけようとする
        何かをみつけたら、[みつけたとき](trigger#みつけたとき)が呼ばれる

    findEnemy:
      name: てきをみつける
      type: function
      desc: |
        [てきかどうか](rpgobject#てきかどうか)をチェックして、
        てきだけを[みつける](rpgobject#みつける)

    flyToward:
      name: とんでいく
      type: function
      desc: |
        このキャラクターが今向いている方向に向かって、このキャラクターをとばす
        もくひょうに別のキャラクターを入れると、そのキャラクターに向かってとんでいく
      args:
        - name: もくひょう
          type: string
          desc: |
            もくひょうにするキャラクターの名前
            このキャラクターから一番近いキャラクターがひとつえらばれて、そこへ向かってとんでいく

    se:
      name: おとをならす
      type: function
      desc: |
        音を一度ならす
      args:
        - name: 名前
          type: string
          desc: 鳴らしたい音の名前 # TODO: 音の名前の表を作る

    talk:
      name: はなす
      type: function
      desc: |
        キャラクターに言葉をしゃべらせる
        せんたくし①を設定すると、といかけ（質問）になり、答えるボタンが表示される
        せんたくし②を設定すると、答えるボタンが２つから選べるようになる
      args:
        - name: ことば
          type: string
          desc: しゃべらせたい言葉
        - name: せんたくし①
          type: string
          desc: １つ目のせんたくし
        - name: せんたくし②
          type: string
          desc: ２つ目のせんたくし。他にいくつでも設定できる
      return:
        name: かいとう
        type: string
        desc: せんたくしの中からえらばれたもの
      code: |
        こたえ = await this.はなす('１＋１は？', '１', '２');
        if (こたえ === '１') {
          await this.はなす('はずれだよ')
        }
        if (こたえ === '２') {
          await this.はなす('せいかい！')
        }

    costume:
      name: みためをかえる
      type: function
      desc: |
        このキャラクターの見た目を、別の見た目にかえる
      args:
        - name: なまえ
          type: string
          desc: どの見た目にするか # TODO: 音の名前の表を作る

    message:
      name: メッセージする
      type: function
      desc: |
        このキャラクターから別のアセットのキャラクターたちに対してメッセージをおくる
        メッセージを受け取ったキャラクターはすべて[メッセージされたとき](trigger#メッセージされたとき)が呼ばれる
      args:
        - name: なまえ
          type: string
          desc: メッセージを送りたいキャラクターの名前

    destroy:
      name: きえる
      type: function
      desc: |
        このキャラクターをただちに消去する

    chase:
      name: おいかける
      type: function
      desc: |
        相手のキャラクターのことを追いかけるように一歩[あるく](rpgobject#あるく)
      args:
        - name: あいて
          type: string | RPGObject
          desc: |
            相手のアセット名、または相手キャラクターの変数
            アセット名を入れた場合は、一番近いキャラクターを追いかける
        - name: ななめにも進むか
          type: boolean
          init: false
          desc: |
            ふつうは４方向にしか進まないが、ここに true を入れると８方向に進む

    faceTo:
      name: ふりむく
      type: function
      desc: |
        相手のキャラクターの方を振り向く
      args:
        - name: あいて
          type: RPGObject
          desc: |
            相手キャラクターの変数

    teleportRandom:
      name: テレポートランダム
      type: function
      desc: |
        ランダムな位置にテレポートする

    turn:
      name: むきをかえる
      type: function
      desc: |
        このキャラクターの[むき](enum#むき)をかえる
      code: |
        this.むきをかえる(むき.うえ); // 上を向く
      args:
        - name: むき
          type: string
          desc: |
            このキャラクターをどの[むき enum/Direction]にするか

    is:
      name: は
      type: function
      desc: |
        そのキャラクターが指定した[なまえ](rpgobject#なまえ)のものかどうかをしらべる
      code: |
        if (item.は('プレイヤー')) {
          // あいてのキャラクターがプレイヤーであれば、ここに入る
        }
      args:
        - name: なまえ
          type: string
          desc: |
            キャラクターの[なまえ](rpgobject#なまえ)

    isEnemy:
      name: てきかどうか
      desc: |
        指定したキャラクターが自分にとって敵(てき)かどうかをしらべる
        同じ[なかま](rpgobject#なかま)でないか、どくりつ同士であれば、敵になる
      code: |
        if (this.てきかどうか(item)) {
          // 相手のてきあれば、ここに入る
        }
      args:
        - name: あいて
          type: RPGObject
          desc: |
            てきかどうかをしらべたいキャラクター

    think:
      name: うかべる
      desc: |
        あたまの上に何かをうかべる。しばらくすると消える
        うかべられるものは、 '!' と '?'
      code: |
        await this.うかべる('!');
      args:
        - name: きごう
          type: string
          desc: |
            うかべたい記号。決まったものしか使えない
